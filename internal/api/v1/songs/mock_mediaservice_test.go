// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Karaoke-Manager/karman/internal/service/media (interfaces: Service)

// Package songs is a generated GoMock package.
package songs

import (
	context "context"
	io "io"
	reflect "reflect"

	model "github.com/Karaoke-Manager/karman/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockMediaService is a mock of Service interface.
type MockMediaService struct {
	ctrl     *gomock.Controller
	recorder *MockMediaServiceMockRecorder
}

// MockMediaServiceMockRecorder is the mock recorder for MockMediaService.
type MockMediaServiceMockRecorder struct {
	mock *MockMediaService
}

// NewMockMediaService creates a new mock instance.
func NewMockMediaService(ctrl *gomock.Controller) *MockMediaService {
	mock := &MockMediaService{ctrl: ctrl}
	mock.recorder = &MockMediaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMediaService) EXPECT() *MockMediaServiceMockRecorder {
	return m.recorder
}

// ReadFile mocks base method.
func (m *MockMediaService) ReadFile(arg0 context.Context, arg1 model.File) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockMediaServiceMockRecorder) ReadFile(arg0, arg1 interface{}) *ServiceReadFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockMediaService)(nil).ReadFile), arg0, arg1)
	return &ServiceReadFileCall{Call: call}
}

// ServiceReadFileCall wrap *gomock.Call
type ServiceReadFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceReadFileCall) Return(arg0 io.ReadCloser, arg1 error) *ServiceReadFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceReadFileCall) Do(f func(context.Context, model.File) (io.ReadCloser, error)) *ServiceReadFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceReadFileCall) DoAndReturn(f func(context.Context, model.File) (io.ReadCloser, error)) *ServiceReadFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreImageFile mocks base method.
func (m *MockMediaService) StoreImageFile(arg0 context.Context, arg1 string, arg2 io.Reader) (model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImageFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreImageFile indicates an expected call of StoreImageFile.
func (mr *MockMediaServiceMockRecorder) StoreImageFile(arg0, arg1, arg2 interface{}) *ServiceStoreImageFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImageFile", reflect.TypeOf((*MockMediaService)(nil).StoreImageFile), arg0, arg1, arg2)
	return &ServiceStoreImageFileCall{Call: call}
}

// ServiceStoreImageFileCall wrap *gomock.Call
type ServiceStoreImageFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceStoreImageFileCall) Return(arg0 model.File, arg1 error) *ServiceStoreImageFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceStoreImageFileCall) Do(f func(context.Context, string, io.Reader) (model.File, error)) *ServiceStoreImageFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceStoreImageFileCall) DoAndReturn(f func(context.Context, string, io.Reader) (model.File, error)) *ServiceStoreImageFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
