openapi: 3.0.3
info:
  title: Karman API
  version: ""
  description: |-
    This is the API specification for [Karman](https://github.com/Karaoke-Manager/karman), the Karaoke Manager.
    
    # State of this Specification
    
    This document is currently a work in progress that aims to describes the state of the implementation.
    
    # General Rules
    
    This section outlines some general rules and conventions that you will find in the Karman API.
    For reasons of simplicity these are given once here and not repeated on every endpoint or resource.
    If an endpoint or a resource deviates from these rules it will be noted.
    
    ## Content-Types
    
    When working with the Karman API you need to include the `Content-Type` in all non-empty requests.
    If this documentation does not explicitly specify the allowed values, you should use `application/json`.
    If the `Content-Type` header is missing, a `400 Bad Request` error will be generated.
    If the `Content-Type` header is not supported, a `415 Unsupported Media Type` error will be returned.
    This error is documented here and not explicitly included in every endpoint.
    
    The Karman API supports and enforces Content-Type negotiation via the Accept header.
    All requests should include this header specifying the acceptable content types for a response.
    The Karman API will try to fulfill the request and will return a 406 Not Acceptable response if an endpoint
    does not support any of the content types listed in the Accept header.
    This error is documented here and not explicitly included in every endpoint.
    
    ## Zero-Values
    
    In most cases the API tries to not use `null` values.
    Instead a contextual zero-value will be considered equivalent to an unspecified value.
    For example the `genre` of a `Song` resource is defined as a `string`.
    Setting the `genre` to `null` will result in an error.
    To set the genre to _unspecified_ you instead set it to the empty string `""`.
    
    In most cases zero-values will not be included in API responses.
    Continuing the above example the field `genre` will only be included in API responses if it has a value other than the empty string.
    If a field can be `null` it will be explicitly mentioned.
  contact:
    name: Karman on GitHub
    url: https://github.com/Karaoke-Manager/karman
  license:
    name: MIT
    url: https://opensource.org/license/mit/


tags:
  - name: server
    x-displayName: Server Management
    description: |-
      Endpoints in this section are not usually used by API clients directly.


paths:
  /healthz:
    get:
      operationId: getHealthz
      summary: Server Health
      tags: [ server ]
      security: []
      description: |-
        Get information about the health of the server.
        Applications should only consider the response code of the response.
      responses:
        204:
          x-summary: OK
          description: |-
            This response indicates that the server is healthy.
        503:
          x-summary: Unhealthy
          description: |-
            This response indicates that the server is not healthy.
          content:
            application/problem+json:
              schema:
                example:
                  title: "Service Unavailable"
                  status: 503
                allOf:
                  - $ref: "./common/problem-details.yaml#/components/schemas/ProblemDetails"
        5XX: { $ref: "./common/problem-details.yaml#/components/responses/UnexpectedError" }


x-tagGroups:
  - name: Authentication
    tags:
      - auth
      - user
  - name: Library Management
    tags:
      - song
      - media
      - upload
  - name: Server Management
    tags:
      - server


security:
  - OAuth2: [ ]


components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: |-
        In order to access this endpoint you must provide a valid `Bearer` token
        in the `Authorization` header.
        
        See the [`/auth/token`](#tag/auth/operation/createToken) endpoint for more information on how to acquire a token.
      flows:
        # noinspection YAMLSchemaValidation
        urn:ietf:params:oauth:grant-type:token-exchange: { }
          # Semantically these should be uncommented.
          # However, visually Redoc only shows the refreshUrl which might be misleading.
          # The urls from the password flow display in a way that it can also be applied to this flow.

          # tokenUrl: /auth/token
        # refreshUrl: /auth/token
        password:
          tokenUrl: /auth/token
          refreshUrl: /auth/token
          scopes: { }
