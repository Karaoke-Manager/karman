openapi: 3.0.3
info:
  title: Songs Resources
  version: v1
  license:
    name: MIT
    url: https://opensource.org/license/mit/


tags:
  - name: song
    x-displayName: Managing Songs
    description: |-
      Songs are a core resource of the Karman API.
      The following endpoints allow querying information about songs as well as manipulating the song database.
      
      ## WebDAV
      
      The song library can be accessed over WebDAV at `/v1/dav`.
      The OpenAPI does not have proper support for documenting WebDAV endpoints, so the endpoint is described here.
      
      The `/v1/dav` endpoint conforms to the WebDAV standard.
      Responses are generated accordingly, including error responses.
      WebDAV error responses do not conform to [RFC 9457](https://www.rfc-editor.org/rfc/rfc7807).
      
      The `/v1/dav` endpoint is completely read-only.
      Any modification requests (like `COPY` or `PUT`) will return an error response.
      
      ## Search Queries
      
      Songs can be searched and filtered at different points throughout the API.
      Searching for songs is done through a special query syntax that is inspired by the queries used to filter GitHub issues.
      
      ### Basic Structure of a Search Query
      
      A search query is a sequence of space-separate query fields.
      Each of those query fields corresponds to a restriction imposed on the list of search results.
      All of those restrictions are then ANDed together, so a song must meed all criteria to be included in the search results.
      The empty string is a valid query that matches all songs.
      
      A query field can have multiple forms:
      
      - A search term consisting of a single word (`value`) or a quoted string (`"another value"`).
        A Song can meet this restriction if it contains the word or string.
        The fields in which the song must contain the value can be configured using the `in:` filter.
        By default the fields title, artist, lyrics and comment are considered.
      - A filter consisting of a key and a value, separated by a colon (and no spaces).
        The value can be a single word (`key:value`) or a quoted string (`key:"another value"`).
        The key must not be quoted.
        The restriction imposed by a filter depends on the filter key.
        See below for a list of available filters.
      - Filters can contain unary operators such as `>`, `>=`, `<`, `<=`, and `=`.
        The operator precedes the value, e.g. `year:<2000` or `artist:="The Who"`.
        Additionally there is a binary range operator `..` that can be used like `year:1990..1999`. 
        Which operators are allowed depends on the filter.
        The exact meaning of operators also depends on the filter.
      - Any field can be prefixed with `-` to negate its effect.
        For example the query `-hello -key:value` matches songs that do not contain the word `hello`
        and for which the filter `key:value` is not met.
      
      The behavior for invalid queries is undefined.
      Sometimes the list of results may be empty and sometimes there can be some results.
      Currently there is no escaping within search queries, so searching or filtering for values containing quotes is not possible.
      
      ### The `in` filter
      The `in` filter determines in which parts of a song the search terms must appear.
      
      The value for this filter is a comma-separated list of fields that are consulted to match the search terms.
      The default value is `title,artist,comment,lyrics`.
      
      If the `in` filter appears multiple times in a query, each occurrence is evaluated separately.
      For example the query `foo in:title in:artist` requires the word `foo` to appear in the title and artist field.
      whereas `foo in:title,artist` requires the word to appear in the title or artist field.
      
      ### Metadata Filters
      You can apply filters to various metadata fields, including custom fields.
      The filter key corresponds to the name of the field and the value defines a string that must be contained within that field.
      
      For example the query `title:Hello` matches songs that have `Hello` in their title.
      Matches are performed in a case-insensitive manner.
      Multiple occurrences of the same metadata filter are independent of each other.
      `title:Hello title:World` requires both `Hello` and `World` to be present in the title of a song.
      
      By default string fields match if the value is contained within the field.
      You can use the `=` operator to filter for exact matches.
      However, matches are always case insensitive.
      Numeric and date fields are matched exactly, even if no `=` operator is specified.
      
      ### Numeric and Date Filters
      Metadata fields that contain numeric or date values have additional filter options available.
      You can use `>`, `>=`, `<` and `<=` to search for values that are
      greater than, greater than or equal to, less than, and less than or equal to another value
      For example `year:>=2000` would return songs published in the year 2000 or later.
      
      Additionally you can perform range queries using a `n..m` value.
      For example you could search for songs from the 90s with the query `year:1990..1999`.
      
      Dates must be formatted according to [ISO8601](http://en.wikipedia.org/wiki/ISO_8601).
      
      ### The `is` and `has` filters
      The filters `is` and `has` can filter by certain boolean properties of a song.
      Currently the following filters are valid:
      
      - `is:duet`: Filters songs by their duet status.
      - `has:cover`: Filters songs with covers
      - `has:audio`: Filters songs with audio
      - `has:video`: Filters songs with video
      - `has:background`: Filters songs with background
      

paths:
  /v1/songs:
    post:
      operationId: createSong
      summary: Create a Song
      tags: [ song ]
      description: |-
        Create a new song from an UltraStar TXT file.
        The contents of the TXT file must be submitted as the request body.
        
        All known metadata specified in the TXT file will be used for the new song resource,
        however all file references will be ignored.
        The song will be created without audio, video, cover, and background.
        These can be supplied later via other endpoints like `v1/songs/{uuid}/audio` or `v1/songs/{uuid}/cover`.
        
        If this request completes successfully it will return the newly created `Song` resource.
      requestBody:
        required: true
        description: |-
          The raw contents of a UltraStar TXT file.
          Anything after the end tag `"E"` will be ignored.
        content:
          text/plain:
            schema:
              type: string
              format: ultrastar
      responses:
        201:
          x-summary: Success
          description: |-
            When the request completes successfully the response contains the newly created song resource.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Song' }
        400:
          x-summary: Bad Request
          description: |-
            This error indicates that the TXT data is not properly formatted and can not be parsed.
            This is usually an indication that the supplied file is not in the UltraStar TXT format.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/InvalidTXTError"
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        403: { $ref: "../common/problem-details.yaml#/components/responses/PermissionDenied" }
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }

    get:
      operationId: findSongs
      summary: Find Songs
      tags: [ song ]
      security:
        - {}
        - OAuth2: []
      parameters:
        - $ref: "#/components/parameters/query"
        - $ref: "../common/pagination.yaml#/components/parameters/limit"
        - $ref: "../common/pagination.yaml#/components/parameters/offset"
      description: |-
        List all songs in the database.
      responses:
        200:
          x-summary: Success
          description: |-
            A successful request returns a paginated collection of songs.
            If the selected filters produce an empty list, the `results` will be empty.
            A `404` status code will not be returned.
          headers:
            Pagination-Count: { $ref: "../common/pagination.yaml#/components/headers/Pagination-Count" }
            Pagination-Offset: { $ref: "../common/pagination.yaml#/components/headers/Pagination-Offset" }
            Pagination-Limit: { $ref: "../common/pagination.yaml#/components/headers/Pagination-Limit" }
            Pagination-Total: { $ref: "../common/pagination.yaml#/components/headers/Pagination-Total" }
          content:
            application/json:
              schema:
                type: array
                description: |-
                  An array of `Song` resources.
                items:
                  $ref: '#/components/schemas/Song'
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }


  /v1/songs/{uuid}:
    parameters:
      - $ref: "#/components/parameters/songUUID"

    get:
      operationId: getSong
      summary: Get Song by UUID
      tags: [ song ]
      security:
        - {}
        - OAuth2: []
      description: |-
        Fetches a song by the specified `uuid`.
      responses:
        200:
          x-summary: Success
          description: |-
            When the request completes successfully the response contains the requested song resource.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Song' }
        400: { $ref: "../common/problem-details.yaml#/components/responses/InvalidUUID" }
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        403: { $ref: "../common/problem-details.yaml#/components/responses/PermissionDenied" }
        404: { $ref: "#/components/responses/SongNotFound" }
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }

    patch:
      operationId: updateSong
      summary: |-
        Update Song by UUID
      tags: [ song ]
      description: |-
        Perform a partial update of the song with the specified `uuid`.
        Only the fields specified in the request will be affected.
      requestBody:
        description: |-
          In the request body specify the fields that you want to update and omit the fields that should stay the same.
          If you set fields to the default/null value (e.g. the empty string for the field `genre` or 0 for the `gap`),
          those fields will be omitted in subsequent `GET /v1/songs/{uuid}` responses.
          
          Setting fields to `null` is only supported where it is explicitly mentioned.
        required: true
        content:
          application/json:
            examples:
              updateTitle:
                summary: Update Title
                description: |-
                  Update just the title of the song.
                value:
                  title: "Another title"
              updateMedley:
                summary: Disable Medley and Preview
                description: |-
                  Disable the medley and the preview for this song.
                value:
                  previewStart: 0
                  medley:
                    mode: off
            schema: { $ref: '#/components/schemas/Song' }
      responses:
        204:
          x-summary: Success
          description: |-
            The song was updated successfully.
            Future `GET /v1/songs/{uuid}` requests will reflect the changes.
        400: { $ref: "../common/problem-details.yaml#/components/responses/BadRequestOrInvalidUUID" }
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        403: { $ref: "../common/problem-details.yaml#/components/responses/PermissionDenied" }
        404: { $ref: "#/components/responses/SongNotFound" }
        409: { $ref: "#/components/responses/UploadSongCannotBeModified" }
        422: { $ref: "../common/problem-details.yaml#/components/responses/UnprocessableEntity" }
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }

    delete:
      operationId: deleteSong
      summary: Delete Song by UUID
      tags: [ song ]
      description: |-
        Deletes the song with the specified `uuid`.
        If no song with this UUID exists, the response will have code `204`.
      responses:
        204: { description: Success }
        400: { $ref: "../common/problem-details.yaml#/components/responses/InvalidUUID" }
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        403: { $ref: "../common/problem-details.yaml#/components/responses/PermissionDenied" }
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }


  /v1/songs/{uuid}/txt:
    parameters:
      - $ref: "#/components/parameters/songUUID"

    get:
      operationId: getSongTxt
      summary: Generate a TXT file
      tags: [ song ]
      security:
        - {}
        - OAuth2: []
      description: |-
        Generate a representation of the song identified by `uuid` in the UltraStar TXT format.
        The resulting TXT will include metadata tags as well as the karaoke data.
        
        The file references (`#MP3`, `#COVER`, and so on) will be set if a file exists and will be absent if no file exists.
        The value of these fields will be set to the same filename
        returned in the `Content-Disposition` for the respective `/v1/songs/{uuid}/mp3`, `/v1/songs/{uuid}/cover`, ... endpoints.
      responses:
        200:
          x-summary: Success
          description: |-
            A successful response will contain the generated UltraStar TXT file as its body.
          headers:
            Content-Disposition:
              required: true
              description: |-
                Encoded in this header is a possible file name for the TXT file.
                You should not rely on a specific filename schema as it may change depending on server settings.
              schema:
                type: string
                example: 'attachment; filename="Rick Astley - Never Gonna Give You Up.txt"'
          content:
            "text/plain":
              schema:
                type: string
                format: ultrastar
              example: |
                #ARTIST:Rick Astley
                #TITLE:Never Gonna Give You Up
                #MP3:Rick Astley - Never Gonna Give You Up.mp3
                #BPM:227.22
                #GAP:18880
                ...
                : 0 3 10 We’re 
                : 4 3 12 no
                : 8 3 13 stran
                : 12 3 13 gers
                : 16 3 15 to
                ...
                E
        400: { $ref: "../common/problem-details.yaml#/components/responses/InvalidUUID" }
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        403: { $ref: "../common/problem-details.yaml#/components/responses/PermissionDenied" }
        404: { $ref: "#/components/responses/SongNotFound" }
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }

    put:
      operationId: replaceSongTxt
      summary: Replace Song with TXT
      tags: [ song ]
      description: |-
        Replaces the song identified by `uuid` with the TXT file in the request body.
        
        If the request completes successfully the song will keep its UUID but all metadata as well as the karaoke data
        will be replaced with the data from the request body.
        If the request fails, no modification will be done.
        
        The song will keep its media files.
        Any `#MP3`, `#VIDEO`, `#COVER`, or `#BACKGROUND` tags are ignored.
        If you want to replace or remove a song's media files, use the respective endpoints below.
      requestBody:
        description: |-
          The raw contents of a UltraStar TXT file.
          Anything after the end tag `"E"` will be ignored.
        required: true
        content:
          "text/plain":
            schema:
              type: string
              format: ultrastar
      responses:
        200:
          x-summary: Success
          description: |-
            When the request completes successfully the response contains the updated song resource.
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Song' }
        400:
          x-summary: Bad Request
          description: |-
            This error can indicate one of two things:

            - The `uuid` in the request path was not correctly formatted
            - The TXT data is not properly formatted and can not be parsed.
              This is usually an indication that the supplied file is not in the UltraStar TXT format.
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "../common/problem-details.yaml#/components/schemas/InvalidUUIDError"
                  - $ref: "#/components/schemas/InvalidTXTError"
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        403: { $ref: "../common/problem-details.yaml#/components/responses/PermissionDenied" }
        404: { $ref: "#/components/responses/SongNotFound" }
        409: { $ref: "#/components/responses/UploadSongCannotBeModified" }
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }


  /v1/songs/{uuid}/archive:
    parameters:
      - $ref: "#/components/parameters/songUUID"

    get:
      operationId: getSongArchive
      summary: |-
        Download Song as Archive
      tags: [ song ]
      description: |-
        Download the song and all of its media files packaged in an archive.
        The song is packaged in a way that the archive may be extracted into a folder of UltraStar songs to be immediately singable.
      parameters:
        - in: header
          name: Accept
          schema:
            enum:
              - application/zip
            default: "application/zip"
          required: false
          description: |-
            The `Accept` header defines the desired format of the archive.
      responses:
        200:
          description: Success
          content:
            "application/zip":
              schema:
                type: string
                format: binary
        400: { $ref: "../common/problem-details.yaml#/components/responses/InvalidUUID" }
        401: { $ref: "../common/problem-details.yaml#/components/responses/Unauthorized" }
        403: { $ref: "../common/problem-details.yaml#/components/responses/PermissionDenied" }
        404: { $ref: "#/components/responses/SongNotFound" }
        406:
          x-summary: Not Acceptable
          description: |-
            This error indicates that the requested archive format (via the `Accept` header) is not available.
          content:
            application/problem+json:
              schema:
                example:
                  title: "Not Acceptable"
                  status: 406
                  instance: "/traces/481CF77B-3099-445C-A789-58F997233681"
                allOf:
                  - $ref: "../common/problem-details.yaml#/components/schemas/ProblemDetails"
        5XX: { $ref: "../common/problem-details.yaml#/components/responses/UnexpectedError" }


components:
  parameters:
    query:
      in: query
      name: query
      required: false
      schema:
        type: string
      example: "Never Gonna artist:Rick"
      description: |-
        A query used for filtering and searching results.
        The syntax and semantics are described in [Search Queries](#tag/song/Search-Queries).

    songUUID:
      in: path
      name: uuid
      required: true
      schema:
        type: string
        format: uuid
        minLength: 36
        maxLength: 36
      example: "A37FCD49-40A2-4FB4-83AA-49A57B62317F"
      description: |-
        The UUID of the song to operate on.
        

  schemas:
    Song:
      type: object
      x-tags: [ song ]
      description: |-
        A `Song` resource represents a single UltraStar song.
      properties:
        uuid:
          type: string
          format: uuid
          minLength: 36
          maxLength: 36
          example: "A37FCD49-40A2-4FB4-83AA-49A57B62317F"
          readOnly: true
          description: |-
            The UUID is the unique identifier of a song.
            The UUID of a song is persistent and may be stored long term to identify a song at a later point in time.
            
            You should not make any assumptions on the version or contents of the UUID.
        title:
          type: string
          description: |-
            The title of the song.
          example: "Never Gonna Give You Up"
        artists:
          type: array
          description: |-
            The list of artists of the song.
            The first element of this list should be considered the *primary* artist.
            Subsequent elements are secondary artists (also known as *featured* artists).
          example: ["Rick Astley"]
          items:
            type: string
        genre:
          type: string
          description: |-
            The genre of the song.
          example: "Pop"
        edition:
          type: string
          description: |-
            The edition of the song.
            This is an arbitrary classifier that is often used to group songs together.
          example: "Meme Songs"
        creator:
          type: string
          description: |-
            The name of the creator of the song.
          example: "rickastleyfan"
        language:
          type: string
          description: |-
            The language of the song.
            Currently no validation is performed on this value.
          example: "English"
        year:
          type: integer
          description: |-
            The release year of the song.
          example: 1987
        duetSinger1:
          type: string
          example: "Rick Astley"
          description: |-
            Name of the singer of the first voice.
            Usually combined with `duet=true`.
        duetSinger2:
          type: string
          example: "Ast Rickley"
          description: |-
            Name of the singer of the second voice.
            Usually combined with `duet=true`.
        comment:
          type: string
          description: |-
            An arbitrary comment.
            This field is ignored by most programs.
          example: "An all-time favorite"
        extra:
          type: object
          additionalProperties: { type: string }
          description: |-
            Additional custom metadata fields for the song.
            These are currently ignored by Karman but are stored for future use.
          example:
            subGenre: "Meme"
        bpm:
          type: number
          default: 0
          example: 123.45
          description: |-
            The BPM of the song.
            These are the actual BPM which is 4 times as high as the number in the UltraStar TXT file.
        gap:
          type: integer
          default: 0
          example: 5300
          description: |-
            The number of **milliseconds** that the start of the karaoke notes is delayed from the start of the audio file.
            The value can be negative.
            
            This corresponds to the UltraStar `#GAP` tag.
        videoGap:
          type: integer
          default: 0
          example: 110
          description: |-
            The number of **milliseconds** that the video file will be delayed relative to the start of the audio file.
            The value can be negative.
            
            This corresponds to the UltraStar `#VIDEOGAP` tag.
        notesGap:
          type: integer
          default: 0
          example: 1337
          description: |-
            The number of additional **beats** that the notes will be delayed before the karaoke notes start.
            
            This corresponds to the UltraStar `#NOTESGAP` tag.
        start:
          type: integer
          default: 0
          example: 1000
          description: |-
            The number of **milliseconds** that will be skipped at the beginning of the song.
            This can be used to skip long intros.
            
            This corresponds to the UltraStar `#START` tag.
        end:
          type: integer
          default: 0
          example: 300021
          description: |-
            The number of **milliseconds** after which the song will end, regardless of the length of the audio file.
            This can be used to skip long outros. A zero-value is equivalent to no explicit end tag.
            
            This corresponds to the UltraStar `#END` tag.
        previewStart:
          type: integer
          example: 45000
          description: |-
            The number of **milliseconds** into the song where the preview starts.
            
            This corresponds to the UltraStar `#PREVIEWSTART` tag.
        medley:
          type: object
          default: { mode: "auto" }
          discriminator:
            propertyName: mode
            mapping:
              auto: "#/components/schemas/AutoMedley"
              manual: "#/components/schemas/ManualMedley"
              off: "#/components/schemas/OffMedley"
          oneOf:
            - $ref: "#/components/schemas/AutoMedley"
            - $ref: "#/components/schemas/ManualMedley"
            - $ref: "#/components/schemas/OffMedley"
          description: |-
            Configure the medley calculation of a song.
            Depending on the `mode` additional fields are required.
        duet:
          type: boolean
          readOnly: true
          example: true
          description: |-
            Indicates whether this song is a duet.
        audio:
          type: object
          readOnly: true
          nullable: true
          description: |-
            Information about the audio file of the song or `null` if the song has no audio.
          properties:
            type:
              type: string
              format: mimetype
              example: "audio/mpeg"
              description: |-
                The format of the audio data.
            duration:
              type: integer
              example: 212000
              description: |-
                The duration of the audio file in **milliseconds**.
                If the duration is not known this may be 0.
        video:
          type: object
          readOnly: true
          nullable: true
          description: |-
            Information about the video file of the song or `null` if the song has no video.
          properties:
            type:
              type: string
              format: mimetype
              example: "video/mp4"
              description: |-
                The format of the video data.
            duration:
              type: integer
              example: 212000
              description: |-
                The duration of the audio file in **milliseconds**.
                If the duration is not known this may be 0.
            width:
              type: integer
              example: 1920
              description: |-
                The width of the video in **pixels**.
            height:
              type: integer
              example: 1080
              description: |-
                The height of the video in **pixels**.
        cover:
          type: object
          readOnly: true
          nullable: true
          description: |-
            Information about the cover file of the song or `null` if the song has no cover.
          properties:
            type:
              type: string
              format: mimetype
              example: "image/jpeg"
              description: |-
                The format of the image data.
            width:
              type: integer
              example: 1024
              description: |-
                The width of the image in **pixels**.
            height:
              type: integer
              example: 1024
              description: |-
                The height of the image in **pixels**.
        background:
          type: object
          readOnly: true
          nullable: true
          description: |-
            Information about the background file of the song or `null` if the song has no background.
          properties:
            type:
              type: string
              format: mimetype
              example: "image/png"
              description: |-
                The format of the image data.
            width:
              type: integer
              example: 1920
              description: |-
                The width of the image in **pixels**.
            height:
              type: integer
              example: 1080
              description: |-
                The height of the image in **pixels**.

    AutoMedley:
      type: object
      title: Auto
      properties:
        mode:
          enum: [ auto ]
          description: |-
            `auto` medley mode enables automatic calculation of medleys by UltraStar. This is the default.

    ManualMedley:
      type: object
      title: Manual
      required: [ medleyStartBeat, medleyEndBeat ]
      properties:
        mode:
          enum: [ manual ]
          description: |-
            `manual` medley mode enables you to specify the medley start and end manually.
        medleyStartBeat:
          type: integer
          example: 2736
          description: |-
            The **beat** at which the medley should start.

            This corresponds to the UltraStar `#MEDLEYSTARTBEAT` tag.
        medleyEndBeat:
          type: integer
          example: 3058
          description: |-
            The **beat** at which the medley should end.

            This corresponds to the UltraStar `#MEDLEYENDBEAT` tag.

    OffMedley:
      type: object
      title: Off
      properties:
        mode:
          enum: [ off ]
          description: |-
            `off` mode disables medley calculation completely. No medley will be available.

    SongNotFoundError:
      title: Song Not Found
      example:
        type: "tag:codello.dev,2020:karman/problems:song-not-found"
        title: "Song Not Found"
        status: 404
        uuid: "F0481266-E081-4E28-BB20-4D6221C90C2F"
      allOf:
        - $ref: "../common/problem-details.yaml#/components/schemas/ProblemDetails"
        - type: object
          required: [ uuid ]
          properties:
            uuid:
              type: string
              format: uuid
              minLength: 36
              maxLength: 36
              example: "F0481266-E081-4E28-BB20-4D6221C90C2F"
              description: |-
                The requested UUID for which no song was found.

    InvalidTXTError:
      title: Invalid TXT
      example:
        type: "tag:codello.dev,2020:karman/problems:invalid-ultrastar-txt"
        title: "Invalid UltraStar TXT"
        status: 400
        detail: "Invalid line break."
        instance: "/traces/481CF77B-3099-445C-A789-58F997233681"
        line: 73
      allOf:
        - $ref: "../common/problem-details.yaml#/components/schemas/ProblemDetails"
        - type: object
          properties:
            line:
              type: integer
              description: |-
                The line of the input on which the error occurred.
              example: 73


  responses:
    SongNotFound:
      x-summary: Not Found
      description: |-
        A song with the specified `uuid` does not exist.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/SongNotFoundError"

    UploadSongCannotBeModified:
      x-summary: "Conflict"
      description: |-
        The song with the specified `{uuid}` cannot be modified.
        This error is returned if you try to modify a song that has not been imported into the library yet.
      content:
        application/problem+json:
          schema:
            title: Upload Cannot Be Modified
            example:
              type: "tag:codello.dev,2020:karman/problems:upload-song-readonly"
              title: "A Song in an Upload Cannot Be Modified"
              status: 409
              detail: "The song must be imported before it can be modified."
              instance: "/traces/481CF77B-3099-445C-A789-58F997233681"
              uuid: "FF345AC2-9350-49B5-BD51-8BA47E5DD336"
            allOf:
              - $ref: "../common/problem-details.yaml#/components/schemas/ProblemDetails"
              - type: object
                properties:
                  uuid:
                    type: string
                    format: uuid
                    minLength: 36
                    maxLength: 36
                    example: "FF345AC2-9350-49B5-BD51-8BA47E5DD336"
                    description: |-
                      The UUID of the song that could not be modified.